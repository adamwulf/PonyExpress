{"abstract":[{"code":"PonyExpress","type":"codeVoice"},{"text":" provides a type-safe alternative to ","type":"text"},{"code":"NotificationCenter","type":"codeVoice"},{"text":". Inspired by","type":"text"},{"text":" ","type":"text"},{"text":"https://en.wikipedia.org/wiki/Pony_Express.","type":"text"}],"hierarchy":{"paths":[[]]},"identifier":{"interfaceLanguage":"swift","url":"doc://PonyExpress/documentation/PonyExpress"},"kind":"symbol","metadata":{"externalID":"PonyExpress","modules":[{"name":"PonyExpress"}],"role":"collection","roleHeading":"Framework","symbolKind":"module","title":"PonyExpress"},"primaryContentSections":[{"content":[{"anchor":"Quick-Start","level":2,"text":"Quick Start","type":"heading"},{"inlineContent":[{"text":"Any object or value can be sent as a notification. The recipient registers a handler","type":"text"},{"text":" ","type":"text"},{"text":"method for the type of object to receive.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"An example:","type":"text"}],"type":"paragraph"},{"code":["struct ExampleNotification: Mail {","    var info: Int","    var other: Float","}","","class ExampleRecipient {","    init() {","        PostOffice.default.register(self, ExampleRecipient.receive)","    }","","    func receive(notification: ExampleNotification) {","        // ... process the notification","    }","}","","// Send the notification ...","let recipient = ExampleRecipient()","PostOffice.default.post(ExampleNotification(info: 12, other: 15))"],"syntax":"swift","type":"codeListing"},{"anchor":"Posting-notifications","level":2,"text":"Posting notifications","type":"heading"},{"inlineContent":[{"text":"Any object that implements the empty ","type":"text"},{"code":"Mail","type":"codeVoice"},{"text":" protocol can be sent as a notification,","type":"text"},{"text":" ","type":"text"},{"text":"and only recipients registered for that notification type will receive it.","type":"text"}],"type":"paragraph"},{"code":["// Send a struct with the above example, or send an enum, or any other type.","enum ExampleEnum: Mail {","    case fumble","    case mumble(bumble: Int)","}","","PostOffice.default.register { (mail: ExampleEnum) in","    // ... process the notification","}","","PostOffice.default.post(ExampleEnum.mumble(bumble: 12))"],"syntax":"swift","type":"codeListing"},{"anchor":"Observing-notifications","level":2,"text":"Observing notifications","type":"heading"},{"inlineContent":[{"text":"There are multiple ways to receive notifications. All observers define the type of notification","type":"text"},{"text":" ","type":"text"},{"text":"that they want to receive, and only notifications matching those types will be received. If a","type":"text"},{"text":" ","type":"text"},{"text":"sender is specified, the type of that sender must also match.","type":"text"}],"type":"paragraph"},{"anchor":"Option-1-Register-an-object-and-method","level":3,"text":"Option 1: Register an object and method","type":"heading"},{"inlineContent":[{"text":"Just as in ","type":"text"},{"code":"NotificationCenter","type":"codeVoice"},{"text":", the object is held weakly, and does not need to","type":"text"},{"text":" ","type":"text"},{"text":"be explicitly unregistered when the object deallocs.","type":"text"}],"type":"paragraph"},{"code":["class MyClass {","    func init() {","        PostOffice.default.register(self, MyClass.receive) ","    }","    ","    func receive(notification: ExampleNotification, sender: ExampleSender) {","        // process the notification","    }","}"],"syntax":"swift","type":"codeListing"},{"anchor":"Option-2-Register-a-block","level":3,"text":"Option 2: Register a block","type":"heading"},{"inlineContent":[{"text":"A block or method can be passed into the ","type":"text"},{"identifier":"doc://PonyExpress/documentation/PonyExpress/PostOffice","isActive":true,"type":"reference"},{"text":" to observe notifications. Blocks","type":"text"},{"text":" ","type":"text"},{"text":"are held strongly inside the ","type":"text"},{"identifier":"doc://PonyExpress/documentation/PonyExpress/PostOffice","isActive":true,"type":"reference"},{"text":", and must be unregistered explicitly.","type":"text"}],"type":"paragraph"},{"code":["class MyClass {","    var token: RecipientId? ","    ","    func init() {","        PostOffice.default.register { [weak self] (notification: ExampleNotification) in","            // process the notification","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"anchor":"Unregistering","level":2,"text":"Unregistering","type":"heading"},{"inlineContent":[{"text":"Every ","type":"text"},{"code":"register()","type":"codeVoice"},{"text":" method will return a ","type":"text"},{"code":"RecipientId","type":"codeVoice"},{"text":", which can be used to unregister the","type":"text"},{"text":" ","type":"text"},{"text":"recipient.","type":"text"}],"type":"paragraph"},{"code":["let recipient = ExampleRecipient()","let id = PostOffice.default.register(recipient)","...","PostOffice.default.unregister(id)"],"syntax":"swift","type":"codeListing"},{"anchor":"Senders","level":2,"text":"Senders","type":"heading"},{"inlineContent":[{"text":"Sending a ","type":"text"},{"code":"Mail","type":"codeVoice"},{"text":" notification can optionally include a ","type":"text"},{"code":"sender","type":"codeVoice"},{"text":" as well. This is similar to ","type":"text"},{"code":"NotificationCenter","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"where recipients can optionally register for notifications sent only from a specific sender. In PonyExpress,","type":"text"},{"text":" ","type":"text"},{"text":"both the notification and sender are strongly typed.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"For notifications that implement ","type":"text"},{"code":"Verified","type":"codeVoice"},{"text":" but do not implement ","type":"text"},{"code":"Mail","type":"codeVoice"},{"text":", these notifications","type":"text"},{"text":" ","type":"text"},{"inlineContent":[{"text":"must","type":"text"}],"type":"emphasis"},{"text":" include a sender. This is a helpful way to ensure that some notifications are always sent","type":"text"},{"text":" ","type":"text"},{"text":"with a sender, guaranteed at compile time.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Recipients can choose to include or exclude the sender parameter from the receiving block or method.","type":"text"}],"type":"paragraph"},{"code":["class ExampleRecipient {","    init() {","        PostOffice.default.register(self, ExampleRecipient.receiveWithOptionalSender)","        PostOffice.default.register(self, ExampleRecipient.receiveWithSender)","        PostOffice.default.register(self, ExampleRecipient.receiveWithoutSender)","    }","","    // An optional sender will require that the sender of the notification either","    // a) match the type of the `sender`, or b) be `nil`","    func receiveWithOptionalSender(notification: ExampleNotification, sender: ExampleSender?) {","        // ... process the notification","    }","","    // An non-optional sender will require that the sender of the notification either match","    // the `sender` type","    func receiveWithSender(notification: ExampleNotification, sender: ExampleSender) {","        // ... process the notification","    }","","    // Omitting a `sender` parameter will receive notifications for senders of any type, even nil senders","    func receiveWithoutSender(notification: ExampleNotification) {","        // ... process the notification","    }","}","","// recipients can also register to receive notifications from a singular exact-match sender","let sender = ExampleSender()","let recipient = ExampleRecipient()","PostOffice.default.register(sender: sender, recipient, ExampleRecipient.receiveWithSender) ","PostOffice.default.register(sender: sender, recipient, ExampleRecipient.receiveWithoutSender) "],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"When posting a notification, a sender can optionally be provided.","type":"text"}],"type":"paragraph"},{"code":["PostOffice.default.post(ExampleNotification(info: 12, other: 15), sender: sender)"],"syntax":"swift","type":"codeListing"},{"anchor":"DispatchQueues","level":2,"text":"DispatchQueues","type":"heading"},{"inlineContent":[{"text":"When registering with a ","type":"text"},{"identifier":"doc://PonyExpress/documentation/PonyExpress/PostOffice","isActive":true,"type":"reference"},{"text":", the recipient can choose which ","type":"text"},{"code":"DispatchQueue","type":"codeVoice"},{"text":" to be notified on.","type":"text"},{"text":" ","type":"text"},{"text":"If no queue is specified, the notificaiton is sent synchronously on the queue that posts the notification. If","type":"text"},{"text":" ","type":"text"},{"text":"a queue is specified, the notification is sent asynchronously on that queue.","type":"text"}],"type":"paragraph"},{"code":["PostOffice.default.register(queue: myDispatchQueue, recipient, MyClass.receive) "],"syntax":"swift","type":"codeListing"}],"kind":"content"}],"references":{"doc://PonyExpress/documentation/PonyExpress":{"abstract":[{"code":"PonyExpress","type":"codeVoice"},{"text":" provides a type-safe alternative to ","type":"text"},{"code":"NotificationCenter","type":"codeVoice"},{"text":". Inspired by","type":"text"},{"text":" ","type":"text"},{"text":"https://en.wikipedia.org/wiki/Pony_Express.","type":"text"}],"identifier":"doc://PonyExpress/documentation/PonyExpress","kind":"symbol","role":"collection","title":"PonyExpress","type":"topic","url":"/documentation/ponyexpress"},"doc://PonyExpress/documentation/PonyExpress/PostOffice":{"abstract":[{"text":"A ","type":"text"},{"code":"PostOffice","type":"codeVoice"},{"text":" is able to send strongly-typed notifications from any strongly-typed sender, and will","type":"text"},{"text":" ","type":"text"},{"text":"relay them to all registered recipients appropriately.","type":"text"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"PostOffice"}],"identifier":"doc://PonyExpress/documentation/PonyExpress/PostOffice","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"PostOffice"}],"role":"symbol","title":"PostOffice","type":"topic","url":"/documentation/ponyexpress/postoffice"},"doc://PonyExpress/documentation/PonyExpress/RecipientId":{"abstract":[{"text":"An opaque value that represents a specific recipient registered at a ","type":"text"},{"identifier":"doc://PonyExpress/documentation/PonyExpress/PostOffice","isActive":true,"type":"reference"},{"text":".","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RecipientId"}],"identifier":"doc://PonyExpress/documentation/PonyExpress/RecipientId","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"RecipientId"}],"role":"symbol","title":"RecipientId","type":"topic","url":"/documentation/ponyexpress/recipientid"},"doc://PonyExpress/documentation/PonyExpress/UnverifiedMail":{"abstract":[{"text":"Notifications that do not require a specific sender type, or can be sent with a ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" sender, must implement ","type":"text"},{"code":"UnverifiedMail","type":"codeVoice"},{"text":".","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnverifiedMail"}],"identifier":"doc://PonyExpress/documentation/PonyExpress/UnverifiedMail","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"UnverifiedMail"}],"role":"symbol","title":"UnverifiedMail","type":"topic","url":"/documentation/ponyexpress/unverifiedmail"},"doc://PonyExpress/documentation/PonyExpress/VerifiedMail":{"abstract":[{"text":"Unlike ","type":"text"},{"identifier":"doc://PonyExpress/documentation/PonyExpress/UnverifiedMail","isActive":true,"type":"reference"},{"text":", any notification that implements ","type":"text"},{"identifier":"doc://PonyExpress/documentation/PonyExpress/VerifiedMail","isActive":true,"type":"reference"},{"text":" is required to be","type":"text"},{"text":" ","type":"text"},{"text":"posted with a ","type":"text"},{"code":"sender","type":"codeVoice"},{"text":" of ","type":"text"},{"code":"RequiredSender","type":"codeVoice"},{"text":" type.","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"VerifiedMail"}],"identifier":"doc://PonyExpress/documentation/PonyExpress/VerifiedMail","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"VerifiedMail"}],"role":"symbol","title":"VerifiedMail","type":"topic","url":"/documentation/ponyexpress/verifiedmail"}},"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"topicSections":[{"identifiers":["doc://PonyExpress/documentation/PonyExpress/PostOffice"],"title":"Classes"},{"identifiers":["doc://PonyExpress/documentation/PonyExpress/UnverifiedMail","doc://PonyExpress/documentation/PonyExpress/VerifiedMail"],"title":"Protocols"},{"identifiers":["doc://PonyExpress/documentation/PonyExpress/RecipientId"],"title":"Structures"}],"variants":[{"paths":["/documentation/ponyexpress"],"traits":[{"interfaceLanguage":"swift"}]}]}
